[33mcommit 24bc928376ad1bf3fcd5d41eb03621e6431b901e[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: yubaismail <ayubosman723@gmail.com>
Date:   Wed Jul 23 15:15:21 2025 +0300

    I have added a security Authentication endpoint

[1mdiff --git a/pom.xml b/pom.xml[m
[1mindex 762f11c..e3db232 100644[m
[1m--- a/pom.xml[m
[1m+++ b/pom.xml[m
[36m@@ -135,6 +135,155 @@[m
 	</dependencies>[m
 [m
 [m
[32m+[m
[32m+[m	[32m<build>[m
[32m+[m		[32m<plugins>[m
[32m+[m			[32m<plugin>[m
[32m+[m				[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m				[32m<artifactId>spring-boot-maven-plugin</artifactId>[m
[32m+[m			[32m</plugin>[m
[32m+[m		[32m</plugins>[m
[32m+[m	[32m</build>[m
[32m+[m
[32m+[m[32m</project>[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"[m
[32m+[m	[32mxsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">[m
[32m+[m	[32m<modelVersion>4.0.0</modelVersion>[m
[32m+[m	[32m<parent>[m
[32m+[m		[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m		[32m<artifactId>spring-boot-starter-parent</artifactId>[m
[32m+[m		[32m<version>3.5.3</version>[m
[32m+[m		[32m<relativePath/> <!-- lookup parent from repository -->[m
[32m+[m	[32m</parent>[m
[32m+[m	[32m<groupId>dev.ayub</groupId>[m
[32m+[m	[32m<artifactId>student-management-system</artifactId>[m
[32m+[m	[32m<version>0.0.1-SNAPSHOT</version>[m
[32m+[m	[32m<name>student-management-system</name>[m
[32m+[m	[32m<description>Demo project for Spring Boot</description>[m
[32m+[m	[32m<url/>[m
[32m+[m	[32m<licenses>[m
[32m+[m		[32m<license/>[m
[32m+[m	[32m</licenses>[m
[32m+[m	[32m<developers>[m
[32m+[m		[32m<developer/>[m
[32m+[m	[32m</developers>[m
[32m+[m	[32m<scm>[m
[32m+[m		[32m<connection/>[m
[32m+[m		[32m<developerConnection/>[m
[32m+[m		[32m<tag/>[m
[32m+[m		[32m<url/>[m
[32m+[m	[32m</scm>[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<java.version>21</java.version>[m
[32m+[m	[32m</properties>[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-data-jpa</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-web</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>com.auth0</groupId>[m
[32m+[m			[32m<artifactId>java-jwt</artifactId>[m
[32m+[m			[32m<version>4.4.0</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-validation</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-actuator</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-security</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.json</groupId>[m
[32m+[m			[32m<artifactId>json</artifactId>[m
[32m+[m			[32m<version>20231013</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-api</artifactId>[m
[32m+[m			[32m<version>0.11.5</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-mail</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-impl</artifactId>[m
[32m+[m			[32m<version>0.11.5</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-jackson</artifactId>[m
[32m+[m			[32m<version>0.11.5</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-devtools</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m			[32m<optional>true</optional>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>com.mysql</groupId>[m
[32m+[m			[32m<artifactId>mysql-connector-j</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.projectlombok</groupId>[m
[32m+[m			[32m<artifactId>lombok</artifactId>[m
[32m+[m			[32m<optional>true</optional>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-test</artifactId>[m
[32m+[m			[32m<scope>test</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.slf4j</groupId>[m
[32m+[m			[32m<artifactId>slf4j-api</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>ch.qos.logback</groupId>[m
[32m+[m			[32m<artifactId>logback-classic</artifactId>[m
[32m+[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.hibernate.orm</groupId>[m
[32m+[m			[32m<artifactId>hibernate-core</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<!-- MapStruct Core -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.mapstruct</groupId>[m
[32m+[m			[32m<artifactId>mapstruct</artifactId>[m
[32m+[m			[32m<version>1.5.5.Final</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- MapStruct Processor (for annotation processing) -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.mapstruct</groupId>[m
[32m+[m			[32m<artifactId>mapstruct-processor</artifactId>[m
[32m+[m			[32m<version>1.5.5.Final</version>[m
[32m+[m			[32m<scope>provided</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m	[32m</dependencies>[m
[32m+[m
[32m+[m
[32m+[m
 	<build>[m
 		<plugins>[m
 			<plugin>[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/config/Securty/BaseEntity.java b/src/main/java/dev/ayub/student_management_system/config/Securty/BaseEntity.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9ccd60a[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/Securty/BaseEntity.java[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.Securty;[m
[32m+[m
[32m+[m[32mimport jakarta.persistence.Column;[m
[32m+[m[32mimport jakarta.persistence.MappedSuperclass;[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m[32mimport org.hibernate.annotations.CreationTimestamp;[m
[32m+[m[32mimport org.hibernate.annotations.UpdateTimestamp;[m
[32m+[m
[32m+[m[32mimport java.time.Instant;[m
[32m+[m
[32m+[m[32m@MappedSuperclass[m
[32m+[m[32m@Data[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m
[32m+[m[32mpublic class BaseEntity {[m
[32m+[m
[32m+[m[32m    @CreationTimestamp[m
[32m+[m[32m    @Column(name = "created_at" )[m
[32m+[m[32m    private Instant createdAt;[m
[32m+[m
[32m+[m[32m    @UpdateTimestamp[m
[32m+[m[32m    @Column(name = "updated_at")[m
[32m+[m[32m    private Instant updatedAt;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/config/Securty/DualAuthenticationProvider.java b/src/main/java/dev/ayub/student_management_system/config/Securty/DualAuthenticationProvider.java[m
[1mnew file mode 100644[m
[1mindex 0000000..f7964fe[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/Securty/DualAuthenticationProvider.java[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.Securty;[m
[32m+[m
[32m+[m[32mimport dev.ayub.student_management_system.repository.UserRepository;[m
[32m+[m[32mimport lombok.extern.slf4j.Slf4j;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.authentication.BadCredentialsException;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.Authentication;[m
[32m+[m[32mimport org.springframework.security.core.AuthenticationException;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.crypto.password.PasswordEncoder;[m
[32m+[m[32mimport org.springframework.stereotype.Component;[m
[32m+[m[32mimport dev.ayub.student_management_system.model.entity.User;[m
[32m+[m
[32m+[m[32mimport java.util.Optional;[m
[32m+[m
[32m+[m[32m@Component[m
[32m+[m[32m@Slf4j[m
[32m+[m[32mpublic class DualAuthenticationProvider implements AuthenticationProvider {[m
[32m+[m
[32m+[m[32m    private final UserRepository userRepository;[m
[32m+[m[32m    private final PasswordEncoder passwordEncoder;[m
[32m+[m[32m    private final UserDetailService userDetailService;[m
[32m+[m
[32m+[m[32m    // Use constructor without @RequiredArgsConstructor to break circular dependency[m
[32m+[m[32m    public DualAuthenticationProvider([m
[32m+[m[32m            UserRepository userRepository,[m
[32m+[m[32m            PasswordEncoder passwordEncoder,[m
[32m+[m[32m            UserDetailService userDetailService) {[m
[32m+[m[32m        this.userRepository = userRepository;[m
[32m+[m[32m        this.passwordEncoder = passwordEncoder;[m
[32m+[m[32m        this.userDetailService = userDetailService;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public Authentication authenticate(Authentication authentication) throws AuthenticationException {[m
[32m+[m[32m        String email = authentication.getName();[m
[32m+[m[32m        String password = authentication.getCredentials().toString();[m
[32m+[m[32m        log.debug("Attempting authentication for email: {}", email);[m
[32m+[m
[32m+[m[32m        // Check if the user exists in the user repository[m
[32m+[m[32m        Optional<User> userOptional = userRepository.findByEmail(email);[m
[32m+[m[32m        if (userOptional.isPresent()) {[m
[32m+[m[32m            log.debug("Found user with email: {}", email);[m
[32m+[m[32m            User user = userOptional.get();[m
[32m+[m
[32m+[m[32m            // Validate password[m
[32m+[m[32m            if (passwordEncoder.matches(password, user.getPassword())) {[m
[32m+[m[32m                log.debug("User password matched for email: {}", email);[m
[32m+[m[32m                UserDetails userDetails = userDetailService.loadUserByUsername(email);[m
[32m+[m[32m                return new UsernamePasswordAuthenticationToken([m
[32m+[m[32m                        userDetails, null, userDetails.getAuthorities());[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // If authentication failed[m
[32m+[m[32m        log.debug("Authentication failed for email: {}", email);[m
[32m+[m[32m        throw new BadCredentialsException("Invalid email or password");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public boolean supports(Class<?> authentication) {[m
[32m+[m[32m        return authentication.equals(UsernamePasswordAuthenticationToken.class);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/config/Securty/JWTAuthenticationFilter.java b/src/main/java/dev/ayub/student_management_system/config/Securty/JWTAuthenticationFilter.java[m
[1mnew file mode 100644[m
[1mindex 0000000..fd58445[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/Securty/JWTAuthenticationFilter.java[m
[36m@@ -0,0 +1,83 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.Securty;[m
[32m+[m
[32m+[m[32mimport com.fasterxml.jackson.databind.ObjectMapper;[m
[32m+[m[32mimport dev.ayub.student_management_system.model.dto.ErrorResponseDTO;[m
[32m+[m[32mimport io.jsonwebtoken.ExpiredJwtException;[m
[32m+[m[32mimport jakarta.servlet.FilterChain;[m
[32m+[m[32mimport jakarta.servlet.ServletException;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletRequest;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport lombok.RequiredArgsConstructor;[m
[32m+[m[32mimport lombok.extern.slf4j.Slf4j;[m
[32m+[m[32mimport org.antlr.v4.runtime.misc.NotNull;[m
[32m+[m[32mimport org.springframework.http.MediaType;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.context.SecurityContextHolder;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;[m
[32m+[m[32mimport org.springframework.stereotype.Component;[m
[32m+[m[32mimport org.springframework.web.filter.OncePerRequestFilter;[m
[32m+[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m
[32m+[m[32m@Component[m
[32m+[m[32m@RequiredArgsConstructor[m
[32m+[m[32m@Slf4j[m
[32m+[m[32mpublic class JWTAuthenticationFilter extends OncePerRequestFilter {[m
[32m+[m
[32m+[m[32m    private final JWTService jwtService;[m
[32m+[m[32m    private final UserDetailService userDetailService;[m
[32m+[m[32m    private final ObjectMapper objectMapper; // Injected as a Spring Bean[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    protected void doFilterInternal(@NotNull HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull FilterChain filterChain)[m
[32m+[m[32m            throws ServletException, IOException {[m
[32m+[m[32m        final String authHeader = request.getHeader("Authorization");[m
[32m+[m
[32m+[m[32m        // Validate the Authorization header[m
[32m+[m[32m        if (authHeader == null || !authHeader.startsWith("Bearer ")) {[m
[32m+[m[32m            filterChain.doFilter(request, response);[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        final String token = authHeader.substring(7);[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m            final String username = jwtService.extractUsername(token);[m
[32m+[m
[32m+[m[32m            // Authenticate only if username is extracted and no authentication exists in the context[m
[32m+[m[32m            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {[m
[32m+[m[32m                UserDetails userDetails = userDetailService.loadUserByUsername(username);[m
[32m+[m
[32m+[m[32m                if (jwtService.isTokenValid(token, userDetails)) {[m
[32m+[m[32m                    UsernamePasswordAuthenticationToken authenticationToken =[m
[32m+[m[32m                            new UsernamePasswordAuthenticationToken(username, null, userDetails.getAuthorities());[m
[32m+[m[32m                    authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        } catch (ExpiredJwtException e) {[m
[32m+[m[32m            log.error("JWT Token expired: {}", e.getMessage());[m
[32m+[m[32m            sendErrorResponse(response, HttpServletResponse.SC_UNAUTHORIZED, "Your authentication token has expired. Please generate another token!");[m
[32m+[m[32m            return;[m
[32m+[m[32m        } catch (Exception e) {[m
[32m+[m[32m            log.error("Invalid Token: {}", e.getMessage());[m
[32m+[m[32m            sendErrorResponse(response, HttpServletResponse.SC_UNAUTHORIZED, "Invalid Token provided!");[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        filterChain.doFilter(request, response);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private void sendErrorResponse(HttpServletResponse response, int status, String message) throws IOException {[m
[32m+[m[32m        ErrorResponseDTO errorResponseDTO = ErrorResponseDTO.builder()[m
[32m+[m[32m                .status(status)[m
[32m+[m[32m                .message(message)[m
[32m+[m[32m                .build();[m
[32m+[m[32m        response.setStatus(status);[m
[32m+[m[32m        response.setContentType(MediaType.APPLICATION_JSON_VALUE);[m
[32m+[m[32m        response.getWriter().write(objectMapper.writeValueAsString(errorResponseDTO));[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/config/Securty/JWTService.java b/src/main/java/dev/ayub/student_management_system/config/Securty/JWTService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..e04410b[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/Securty/JWTService.java[m
[36m@@ -0,0 +1,92 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.Securty;[m
[32m+[m
[32m+[m[32mimport io.jsonwebtoken.Claims;[m
[32m+[m[32mimport io.jsonwebtoken.Jwts;[m
[32m+[m[32mimport io.jsonwebtoken.SignatureAlgorithm;[m
[32m+[m[32mimport io.jsonwebtoken.io.Decoders;[m
[32m+[m[32mimport io.jsonwebtoken.security.Keys;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Value;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m[32mimport java.security.Key;[m
[32m+[m[32mimport java.util.Date;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.function.Function;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class JWTService {[m
[32m+[m
[32m+[m[32m    @Value("${config.app.jwtSecret}")[m
[32m+[m[32m    private String jwtSecret;[m
[32m+[m
[32m+[m[32m    @Value("${config.app.jwtExpirationMs}")[m
[32m+[m[32m    private int jwtExpirationMs;[m
[32m+[m
[32m+[m[32m    public String extractUsername(String token) throws Exception {[m
[32m+[m[32m        return extractClaim(token, Claims::getSubject);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private Claims extractAllClaims(String token) throws Exception {[m
[32m+[m[32m        return Jwts.parserBuilder()[m
[32m+[m[32m                .setSigningKey(getSigningKey())[m
[32m+[m[32m                .build()[m
[32m+[m[32m                .parseClaimsJws(token)[m
[32m+[m[32m                .getBody();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) throws Exception {[m
[32m+[m[32m        final Claims claims = extractAllClaims(token);[m
[32m+[m[32m        return claimsResolver.apply(claims);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private Key getSigningKey() {[m
[32m+[m[32m        byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);[m
[32m+[m[32m        return Keys.hmacShaKeyFor(keyBytes);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public String generateToken(Map<String, Object> extraClaims, UserDetails userDetails) {[m
[32m+[m[32m        return Jwts.builder().setClaims(extraClaims)[m
[32m+[m[32m                .setSubject(userDetails.getUsername())[m
[32m+[m[32m                .setIssuer("casper.studio")[m
[32m+[m[32m                .setIssuedAt(new Date(System.currentTimeMillis()))[m
[32m+[m[32m                .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs))[m
[32m+[m[32m                .signWith(getSigningKey(), SignatureAlgorithm.HS256)[m
[32m+[m[32m                .compact();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Generate token without extra claims[m
[32m+[m[32m    public String generateToken(UserDetails userDetails) {[m
[32m+[m[32m        Map<String, Object> extraClaims = new HashMap<>();[m
[32m+[m[32m        return generateToken(extraClaims, userDetails);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public String generateRefreshToken(UserDetails userDetails) {[m
[32m+[m[32m        return Jwts.builder()[m
[32m+[m[32m                .setSubject(userDetails.getUsername())[m
[32m+[m[32m                .setIssuer("casper.studio")[m
[32m+[m[32m                .setIssuedAt(new Date(System.currentTimeMillis()))[m
[32m+[m[32m                .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs))[m
[32m+[m[32m                .signWith(getSigningKey(), SignatureAlgorithm.HS256)[m
[32m+[m[32m                .compact();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public Long getTokenExpiry() {[m
[32m+[m[32m        return (long) jwtExpirationMs;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public boolean isTokenValid(String token, UserDetails userDetails) throws Exception {[m
[32m+[m[32m        final String username = extractUsername(token);[m
[32m+[m[32m        return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private boolean isTokenExpired(String token) throws Exception {[m
[32m+[m[32m        return extractExpiration(token).before(new Date());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private Date extractExpiration(String token) throws Exception {[m
[32m+[m[32m        return extractClaim(token, Claims::getExpiration);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/config/Securty/UserDetailService.java b/src/main/java/dev/ayub/student_management_system/config/Securty/UserDetailService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..01b4685[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/Securty/UserDetailService.java[m
[36m@@ -0,0 +1,29 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.Securty;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mimport dev.ayub.student_management_system.repository.UserRepository;[m
[32m+[m[32mimport lombok.RequiredArgsConstructor;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m[32mimport dev.ayub.student_management_system.model.entity.User;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32m@RequiredArgsConstructor[m
[32m+[m[32mpublic class UserDetailService implements UserDetailsService {[m
[32m+[m
[32m+[m[32m    private final UserRepository userRepository;[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {[m
[32m+[m
[32m+[m[32m        User user = userRepository.findByEmail(username)[m
[32m+[m[32m                .orElseThrow(() -> new UsernameNotFoundException("Invalid username/password provided"));[m
[32m+[m
[32m+[m
[32m+[m[32m        return new UserDetails(user);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/config/Securty/UserDetails.java b/src/main/java/dev/ayub/student_management_system/config/Securty/UserDetails.java[m
[1mnew file mode 100644[m
[1mindex 0000000..25759fb[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/Securty/UserDetails.java[m
[36m@@ -0,0 +1,70 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.Securty;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mimport org.springframework.security.core.GrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.authority.SimpleGrantedAuthority;[m
[32m+[m[32mimport dev.ayub.student_management_system.model.entity.User;[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.Collection;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic class UserDetails implements org.springframework.security.core.userdetails.UserDetails {[m
[32m+[m
[32m+[m[32m    private final User userDetails;[m
[32m+[m
[32m+[m[32m    public UserDetails(User user) {[m
[32m+[m[32m        super();[m
[32m+[m[32m        this.userDetails = user;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public User getUser() {[m
[32m+[m[32m        return this.userDetails;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public Collection<? extends GrantedAuthority> getAuthorities() {[m
[32m+[m[32m        if (this.userDetails == null) {[m
[32m+[m[32m            return new ArrayList<>();[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        List<SimpleGrantedAuthority> authorities = new ArrayList<>();[m
[32m+[m
[32m+[m[32m        // If no roles/permissions found, add default ROLE_USER[m
[32m+[m[32m        if (authorities.isEmpty()) {[m
[32m+[m[32m            authorities.add(new SimpleGrantedAuthority("ROLE_USER"));[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return authorities;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public String getPassword() {[m
[32m+[m[32m        return userDetails.getPassword();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public String getUsername() {[m
[32m+[m[32m        return userDetails.getEmail();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public boolean isAccountNonExpired() {[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public boolean isAccountNonLocked() {[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public boolean isCredentialsNonExpired() {[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public boolean isEnabled() {[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/config/WebSecurity.java b/src/main/java/dev/ayub/student_management_system/config/Securty/WebSecurity.java[m
[1msimilarity index 93%[m
[1mrename from src/main/java/dev/ayub/student_management_system/config/WebSecurity.java[m
[1mrename to src/main/java/dev/ayub/student_management_system/config/Securty/WebSecurity.java[m
[1mindex 7c5bbdc..14ed71b 100644[m
[1m--- a/src/main/java/dev/ayub/student_management_system/config/WebSecurity.java[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/Securty/WebSecurity.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package dev.ayub.student_management_system.config;[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.Securty;[m
 [m
 [m
 import lombok.RequiredArgsConstructor;[m
[36m@@ -11,10 +11,8 @@[m [mimport org.springframework.security.config.annotation.method.configuration.Enabl[m
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
 import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[31m-import org.springframework.security.config.http.SessionCreationPolicy;[m
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
 import org.springframework.security.web.SecurityFilterChain;[m
[31m-import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
 import org.springframework.web.cors.CorsConfiguration;[m
 import org.springframework.web.cors.CorsConfigurationSource;[m
 import org.springframework.web.cors.UrlBasedCorsConfigurationSource;[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/config/Utils/ApiResponseUtil.java b/src/main/java/dev/ayub/student_management_system/config/Utils/ApiResponseUtil.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5e24188[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/Utils/ApiResponseUtil.java[m
[36m@@ -0,0 +1,42 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.Utils;[m
[32m+[m
[32m+[m[32mimport dev.ayub.student_management_system.model.dto.ErrorResponseDTO;[m
[32m+[m[32mimport dev.ayub.student_management_system.model.dto.SuccessResponseDTO;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m
[32m+[m[32mpublic class ApiResponseUtil {[m
[32m+[m
[32m+[m[32m    public static <T> ResponseEntity<SuccessResponseDTO<T>> success(T data, String message) {[m
[32m+[m[32m        SuccessResponseDTO<T> response = SuccessResponseDTO.<T>builder()[m
[32m+[m[32m                .status(HttpStatus.OK.value())[m
[32m+[m[32m                .message(message)[m
[32m+[m[32m                .data(data)[m
[32m+[m[32m                .build();[m
[32m+[m[32m        return new ResponseEntity<>(response, HttpStatus.OK);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static <T> ResponseEntity<SuccessResponseDTO<T>> success(T data, String message, HttpStatus status) {[m
[32m+[m[32m        SuccessResponseDTO<T> response = SuccessResponseDTO.<T>builder()[m
[32m+[m[32m                .status(status.value())[m
[32m+[m[32m                .message(message)[m
[32m+[m[32m                .data(data)[m
[32m+[m[32m                .build();[m
[32m+[m[32m        return new ResponseEntity<>(response, status);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static ResponseEntity<ErrorResponseDTO> error(HttpStatus status, String message, Map<String, String> errors) {[m
[32m+[m[32m        ErrorResponseDTO response = ErrorResponseDTO.builder()[m
[32m+[m[32m                .status(status.value())[m
[32m+[m[32m                .message(message)[m
[32m+[m[32m                .errors(errors)[m
[32m+[m[32m                .build();[m
[32m+[m[32m        return new ResponseEntity<>(response, status);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static ResponseEntity<ErrorResponseDTO> error(HttpStatus status, String message) {[m
[32m+[m[32m        return error(status, message, null);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/exceptions/GlobalExceptionHandler.java b/src/main/java/dev/ayub/student_management_system/config/exceptions/GlobalExceptionHandler.java[m
[1msimilarity index 94%[m
[1mrename from src/main/java/dev/ayub/student_management_system/exceptions/GlobalExceptionHandler.java[m
[1mrename to src/main/java/dev/ayub/student_management_system/config/exceptions/GlobalExceptionHandler.java[m
[1mindex 5a8c54e..4c24613 100644[m
[1m--- a/src/main/java/dev/ayub/student_management_system/exceptions/GlobalExceptionHandler.java[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/config/exceptions/GlobalExceptionHandler.java[m
[36m@@ -1,4 +1,4 @@[m
[31m-package dev.ayub.student_management_system.exceptions;[m
[32m+[m[32mpackage dev.ayub.student_management_system.config.exceptions;[m
 [m
 [m
 import org.springframework.http.HttpStatus;[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/model/dto/ErrorResponseDTO.java b/src/main/java/dev/ayub/student_management_system/model/dto/ErrorResponseDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..edc0026[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/model/dto/ErrorResponseDTO.java[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.model.dto;[m
[32m+[m
[32m+[m[32mimport lombok.Builder;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@Builder[m
[32m+[m[32mpublic class ErrorResponseDTO {[m
[32m+[m[32m    private int status;[m
[32m+[m[32m    private String message;[m
[32m+[m[32m    private Map<String, String> errors;[m
[32m+[m[32m}[m
[32m+[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/model/dto/Request/AuthenticationRequestDTO.java b/src/main/java/dev/ayub/student_management_system/model/dto/Request/AuthenticationRequestDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..d62b4ab[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/model/dto/Request/AuthenticationRequestDTO.java[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.model.dto.Request;[m
[32m+[m
[32m+[m[32mimport lombok.*;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32mpublic class AuthenticationRequestDTO {[m
[32m+[m[32m    private String username;[m
[32m+[m[32m    private String password;[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/model/dto/Response/AuthenticationResponseDTO.java b/src/main/java/dev/ayub/student_management_system/model/dto/Response/AuthenticationResponseDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..a986579[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/model/dto/Response/AuthenticationResponseDTO.java[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.model.dto.Response;[m
[32m+[m
[32m+[m[32mimport lombok.*;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32mpublic class AuthenticationResponseDTO {[m
[32m+[m[32m    private String token;[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/model/dto/SuccessResponseDTO.java b/src/main/java/dev/ayub/student_management_system/model/dto/SuccessResponseDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..b1bb7af[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/model/dto/SuccessResponseDTO.java[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.model.dto;[m
[32m+[m
[32m+[m[32mimport lombok.Builder;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@Builder[m
[32m+[m[32mpublic class SuccessResponseDTO<T> {[m
[32m+[m[32m    private int status;[m
[32m+[m[32m    private String message;[m
[32m+[m[32m    private T data;[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/model/entity/BaseEntity.java b/src/main/java/dev/ayub/student_management_system/model/entity/BaseEntity.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5b6b386[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/model/entity/BaseEntity.java[m
[36m@@ -0,0 +1,4 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.model.entity;[m
[32m+[m
[32m+[m[32mpublic class BaseEntity {[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/model/entity/User.java b/src/main/java/dev/ayub/student_management_system/model/entity/User.java[m
[1mnew file mode 100644[m
[1mindex 0000000..cfdfc18[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/model/entity/User.java[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.model.entity;[m
[32m+[m
[32m+[m[32mimport com.fasterxml.jackson.annotation.JsonBackReference;[m
[32m+[m[32mimport dev.ayub.student_management_system.model.enums.converters.StatusEnumConverter;[m
[32m+[m[32mimport dev.ayub.student_management_system.model.enums.definaton.StatusEnum;[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.*;[m
[32m+[m
[32m+[m[32mimport java.time.LocalDateTime;[m
[32m+[m[32mimport java.util.HashSet;[m
[32m+[m[32mimport java.util.Set;[m
[32m+[m
[32m+[m[32m@Getter[m
[32m+[m[32m@Setter[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Builder[m
[32m+[m[32m@RequiredArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32m@Table(name = "users")[m
[32m+[m[32mpublic class User extends BaseEntity {[m
[32m+[m[32m    @Id[m
[32m+[m[32m    @GeneratedValue(strategy = GenerationType.IDENTITY)[m
[32m+[m[32m    private Long id;[m
[32m+[m
[32m+[m[32m    @Column(name = "first_name")[m
[32m+[m[32m    private String firstName;[m
[32m+[m
[32m+[m[32m    @Column(name = "last_name")[m
[32m+[m[32m    private String lastName;[m
[32m+[m
[32m+[m[32m    @Column(name = "phone", unique = true)[m
[32m+[m[32m    private String phone;[m
[32m+[m
[32m+[m[32m    @Column(name = "email", unique = true)[m
[32m+[m[32m    private String email;[m
[32m+[m
[32m+[m[32m    @JsonBackReference[m
[32m+[m[32m    @Column(name = "password")[m
[32m+[m[32m    private String password;[m
[32m+[m
[32m+[m[32m    @Column(name = "reset_token", nullable = true)[m
[32m+[m[32m    private String resetToken;[m
[32m+[m
[32m+[m[32m    @Convert(converter = StatusEnumConverter.class)[m
[32m+[m[32m    @Column(name = "status", columnDefinition = "integer default 0")[m
[32m+[m[32m    private StatusEnum status;[m
[32m+[m
[32m+[m[32m    @Column(name = "reset_token_expiry_date")[m
[32m+[m[32m    private LocalDateTime resetTokenExpiryDate;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    public String getFullName() {[m
[32m+[m[32m        return firstName+" "+lastName;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/model/enums/converters/StatusEnumConverter.java b/src/main/java/dev/ayub/student_management_system/model/enums/converters/StatusEnumConverter.java[m
[1mnew file mode 100644[m
[1mindex 0000000..04edc71[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/model/enums/converters/StatusEnumConverter.java[m
[36m@@ -0,0 +1,29 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.model.enums.converters;[m
[32m+[m
[32m+[m
[32m+[m[32mimport dev.ayub.student_management_system.model.enums.definaton.StatusEnum;[m
[32m+[m[32mimport jakarta.persistence.AttributeConverter;[m
[32m+[m[32mimport jakarta.persistence.Converter;[m
[32m+[m
[32m+[m[32m// JPA Converter for ConfigStatusEnum[m
[32m+[m[32m@Converter(autoApply = true)[m
[32m+[m[32mpublic class StatusEnumConverter implements AttributeConverter<StatusEnum, Integer> {[m
[32m+[m
[32m+[m[32m    // Converts Enum -> DB Integer[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public Integer convertToDatabaseColumn(StatusEnum status) {[m
[32m+[m[32m        if (status == null) {[m
[32m+[m[32m            return null;[m
[32m+[m[32m        }[m
[32m+[m[32m        return status.getCode();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Converts DB Integer -> Enum[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public StatusEnum convertToEntityAttribute(Integer dbData) {[m
[32m+[m[32m        if (dbData == null) {[m
[32m+[m[32m            return null;[m
[32m+[m[32m        }[m
[32m+[m[32m        return StatusEnum.fromCode(dbData);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/model/enums/definaton/StatusEnum.java b/src/main/java/dev/ayub/student_management_system/model/enums/definaton/StatusEnum.java[m
[1mnew file mode 100644[m
[1mindex 0000000..42eed48[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/model/enums/definaton/StatusEnum.java[m
[36m@@ -0,0 +1,35 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.model.enums.definaton;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.util.Arrays;[m
[32m+[m
[32m+[m[32m// Enum for Status[m
[32m+[m[32mpublic enum StatusEnum {[m
[32m+[m[32m    INACTIVE(0),  // 0 maps to INACTIVE[m
[32m+[m[32m    ACTIVE(1);    // 1 maps to ACTIVE[m
[32m+[m
[32m+[m[32m    private final int code;[m
[32m+[m
[32m+[m[32m    // Constructor[m
[32m+[m[32m    StatusEnum(int code) {[m
[32m+[m[32m        this.code = code;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Getter[m
[32m+[m[32m    public int getCode() {[m
[32m+[m[32m        return code;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Reverse mapping: from Integer to Enum[m
[32m+[m[32m    public static StatusEnum fromCode(int code) {[m
[32m+[m[32m        return Arrays.stream(StatusEnum.values())[m
[32m+[m[32m                .filter(e -> e.getCode() == code)[m
[32m+[m[32m                .findFirst()[m
[32m+[m
[32m+[m
[32m+[m[32m                .orElseThrow(() -> new IllegalArgumentException("Invalid status code: " + code));[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[1mdiff --git a/src/main/java/dev/ayub/student_management_system/repository/UserRepository.java b/src/main/java/dev/ayub/student_management_system/repository/UserRepository.java[m
[1mnew file mode 100644[m
[1mindex 0000000..bde3704[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/dev/ayub/student_management_system/repository/UserRepository.java[m
[36m@@ -0,0 +1,22 @@[m
[32m+[m[32mpackage dev.ayub.student_management_system.repository;[m
[32m+[m
[32m+[m[32mimport dev.ayub.student_management_system.model.enums.definaton.StatusEnum;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.JpaRepository;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.Query;[m
[32m+[m[32mimport org.springframework.stereotype.Repository;[m
[32m+[m[32mimport dev.ayub.student_management_system.model.entity.User;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m[32mimport java.util.Optional;[m
[32m+[m
[32m+[m
[32m+[m[32m@Repository[m
[32m+[m[32mpublic interface UserRepository extends JpaRepository<User, Integer> {[m
[32m+[m[32m    Optional<User> findByEmail(String email);[m
[32m+[m[32m    Optional<User> findByResetToken(String resetToken);[m
[32m+[m[32m    List<User> findByStatus(StatusEnum status);[m
[32m+[m[32m    boolean existsByEmail(String email);[m
[32m+[m[32m    boolean existsByPhone(String phone);[m
[32m+[m[32m    @Query(" SELECT  u from  User u  where u.email =?1 ")[m
[32m+[m[32m    User findUserByEmail(String email);[m
[32m+[m[32m}[m
